进程就是操作系统中执行的一个程序，操作系统以进程为单位分配存储空间，
每个进程都有自己的地址空间、数据栈以及其他用于跟踪进程执行的辅助数据，
操作系统管理所有进程的执行，为它们合理的分配资源。进程可以通过fork或
spawn的方式来创建新的进程来执行其他的任务，不过新的进程也有自己独立的
内存空间，因此必须通过进程间通信机制（IPC，Inter-Process Communication）
来实现数据共享，具体的方式包括管道、信号、套接字、共享内存区等。

一个进程还可以拥有多个并发的执行线索，简单的说就是拥有多个可以获得CPU
调度的执行单元，这就是所谓的线程。由于线程在同一个进程下，它们可以共享
相同的上下文，因此相对于进程而言，线程间的信息共享和通信更加容易。当然
在单核CPU系统中，真正的并发是不可能的，因为在某个时刻能够获得CPU的只有
唯一的一个线程，多个线程共享了CPU的执行时间

无论是多进程还是多线程，只要数量一多，效率肯定上不去，为什么呢？我们打
个比方，假设你不幸正在准备中考，每天晚上需要做语文、数学、英语、物理、
化学这5科的作业，每项作业耗时1小时。如果你先花1小时做语文作业，做完了，
再花1小时做数学作业，这样，依次全部做完，一共花5小时，这种方式称为单任
务模型。如果你打算切换到多任务模型，可以先做1分钟语文，再切换到数学作
业，做1分钟，再切换到英语，以此类推，只要切换速度足够快，这种方式就和
单核CPU执行多任务是一样的了，以旁观者的角度来看，你就正在同时写5科作业。

但是，切换作业是有代价的，比如从语文切到数学，要先收拾桌子上的语文书本、
钢笔（这叫保存现场），然后，打开数学课本、找出圆规直尺（这叫准备新环境），
才能开始做数学作业。操作系统在切换进程或者线程时也是一样的，它需要先保存当
前执行的现场环境（CPU寄存器状态、内存页等），然后，把新任务的执行环境准备
好（恢复上次的寄存器状态，切换内存页等），才能开始执行。这个切换过程虽然
很快，但是也需要耗费时间。如果有几千个任务同时进行，操作系统可能就主要忙
着切换任务，根本没有多少时间去执行任务了，这种情况最常见的就是硬盘狂响，
点窗口无反应，系统处于假死状态。所以，多任务一旦多到一个限度，反而会使得
系统性能急剧下降，最终导致所有任务都做不好。
